averageB <- aggregate(dt$steps, dt$time, mean, na.rm = TRUE)
averageB <- tapply(dt$steps, dt$time, mean, na.rm = TRUE)
plotB1 <- plot(dt$steps, dt$time, type = "l",
ylab = "Mean Number of Steps", xlab = "Time (min)")
plotB1 <- plot(dt$steps, dt$time, type = "l", na.rm = TRUE,
ylab = "Mean Number of Steps", xlab = "Time (min)")
plotB1 <- plot(na.omit(dt$steps), dt$time, type = "l", na.rm = TRUE,
ylab = "Mean Number of Steps", xlab = "Time (min)")
dt1 <- dt[!is.na(dt$steps), ]
View(dt1)
plotB1 <- plot(dt1$steps, dt1$time, type = "l", na.rm = TRUE,
ylab = "Mean Number of Steps", xlab = "Time (min)")
plotB1 <- plot(dt1$steps, dt1$time, type = "l",
ylab = "Mean Number of Steps", xlab = "Time (min)")
View(dt1)
medianA <- tapply(dt1$steps, dt1$date, median)
medianA
View(dt1)
dt1 <- dt[!is.na(dt$steps), ]
View(dt1)
View(dt)
View(dt1)
sum(dt$steps)
sum(is.na(dt$steps))
2304+15264
2304/17568
totalA <- tapply(dt1$steps, dt1$date, sum)
hist(totalA, col = "grey", main = "Frequency of total number of steps taken per day", xlab = "Total number of steps taken per day")
averageA <- tapply(dt1$steps, dt1$date, mean)
medianA <- tapply(dt1$steps, dt1$date, median)
hist(averageA, col = "grey", main = "Frequency of the average number of steps taken per day", xlab = "Average number of steps taken per day")
plotA2 <- barplot(averageA, space = 0.5, names.arg = rownames(averageA),
xlab = "Time (min)", ylab = "Mean Number of Steps")
abline(h=0, lwd = 1)
averageC <- tapply(dt1$steps, dt1$time, mean)
plot(dt1$steps ~ dt1$time, type = "l",
ylab = "Mean Number of Steps", xlab = "Time (min)")
averageC
plot(dt1[, "steps"] ~ dt1[, "time"], type = "l",
ylab = "Mean Number of Steps", xlab = "Time (min)")
averageC <- tapply(dt1$steps, dt1$datetime, mean)
averageC
plot(dt1[, "steps"] ~ dt1[, "datetime"], type = "l",
ylab = "Mean Number of Steps", xlab = "Time (min)")
class(dt1$time)
dt$time <- as.POSIXct(dt$time, format = "%H:%M:%S")
dt1 <- dt[!is.na(dt$steps), ]
class(dt1$time)
averageC <- tapply(dt1$steps, dt1$time, mean)
plot(dt1[, "steps"] ~ dt1[, "datetime"], type = "l",
ylab = "Average Number of Steps", xlab = "Time (min)")
plot(dt1[, "steps"] ~ dt1[, "time"], type = "l",
ylab = "Average Number of Steps", xlab = "Time (min)")
averageC <- aggregate(dt1$steps, dt1$time, mean)
dt1 <- dt[!is.na(dt$steps), ]
averageC <- tapply(dt1$steps, dt1$time, mean)
averageC <- data.frame(averageC)
View(averageC)
dfC <- data.frame(cbind(Time = as.POSIXct(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
dfC <- data.frame(cbind(Time = as.POSIXct(as.vector(names(averageC)), format = "%H:%M:%S"),
Steps = as.numeric(averageC)))
dfC <- data.frame(cbind(Time = as.POSIXct(as.vector(names(averageC)), format = "%H:%M:%S"),
Steps = as.numeric(averageC)))
dfC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
dfC <- data.frame(cbind(Time = as.character(names(averageC)),
Steps = as.numeric(averageC)))
names(averageC)
averageC <- tapply(dt1$steps, dt1$time, mean)
dfC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
View(dfC)
dfC <- data.frame(cbind(Time = as.POSIXct(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
dfC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
dfC$Time <- as.POSIXct(dfC$Time, format = "%H:%M:%S")
View(dfC)
str(dfC)
dfC$Steps <- as.numeric(dfC$Steps)
str(dfC)
View(dfC)
averageC[1:20]
averageB <- tapply(dt1$steps, dt1$date, mean)
medianB <- tapply(dt1$steps, dt1$date, median)
averageC <- tapply(dt1$steps, dt1$time, mean)
dfAC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
View(dfAC)
str(dfAC)
class(averageC)
dfC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = averageC))
dfAC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = averageC))
View(dfAC)
str(dfAC)
dfAC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.numeric(averageC)))
str(dfAC)
dfC$Steps <- as.numeric(dfC$Steps)
str(dfAC)
dfAC$Steps <- as.numeric(dfAC$Steps)
str(dfAC)
View(dfAC)
dfAC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.vector(averageC)))
View(dfAC)
str(dfAC)
dfAC$Steps <- as.numeric(dfAC$Steps)
str(dfAC)
dfAC$Steps <- as.numeric(levels(dfAC$Steps)[dfAC$Steps])
as.character(as.vector(names(averageC))),
Steps = as.vector(averageC)))
dfAC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.vector(averageC)))
dfAC$Steps <- as.numeric(as.character(dfAC$Steps))
plot(dt1[, "steps"] ~ dt1[, "time"], type = "l",
ylab = "Average Number of Steps", xlab = "Time (min)")
str(dfAC)
plot(factor(), dfAC[, "steps"] ~ dfAC[, "time"], type = "l",
ylab = "Average Number of Steps", xlab = "Time (min)")
View(dfAC)
plot(dfAC[, "steps"] ~ dfAC[, "time"], type = "l",
ylab = "Average Number of Steps", xlab = "Time (min)")
plot(dfAC[, "Steps"] ~ dfAC[, "Time"], type = "l",
ylab = "Average Number of Steps", xlab = "Time (min)")
plot(dfAC$Time, dfAC$Steps, type = "l", lwd = 3,
ylab = "Average Number of Steps", xlab = "Time (min)")
maxC <- tapply(dt1$steps, dt1$interval, max)
dfMC <- data.frame(cbind(Time = as.vector(names(maxC)),
Steps = as.vector(maxC)))
View(dfMC)
maxC <- tapply(dt1$steps, dt1$interval, max)
dfMC <- data.frame(cbind(Time = as.character(as.vector(names(maxC))),
Steps = as.vector(maxC)))
View(dfMC)
maxC
maxC <- tapply(dt1$steps, dt1$time, max)
dfMC <- data.frame(cbind(Time = as.character(as.vector(names(maxC))),
Steps = as.vector(maxC)))
View(dfMC)
str(dfMC)
dfAC$Steps <- as.numeric(as.character(dfMC$Steps))
View(dfMC)
plot(dfAC$Time, dfAC$Steps, type = "l", xlab = "Time", ylab = "Average number of steps")
averageC <- tapply(dt1$steps, dt1$time, mean)
averageC
plot(as.factor(rownames(averageC)), averageC, type = "l", xlab = "Time", ylab = "Average number of steps")
dt$time <- paste(dt$interval%/%1000, (dt$interval%/%100)-(dt$interval%/%1000)*10,":", (dt$interval-(dt$interval%/%100)*100)%/%10, (dt$interval-(dt$interval%/%100)*100)%%10, sep = "")
View(dt)
dt1 <- dt[!is.na(dt$steps), ]
View(dt1)
averageC <- tapply(dt1$steps, dt1$time, mean)
plot(as.factor(rownames(averageC)), averageC, type = "l", xlab = "Time", ylab = "Average number of steps")
plot(as.factor(rownames(averageC)), averageC, type = "l", xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average number of steps by time")
plot(as.factor(rownames(averageC)), averageC, xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average number of steps by time")
plot(averageC, xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average number of steps by time")
plot(averageC, type = "l", xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average number of steps by time")
plot(averageC ~ as.factor(rownames(averageC)), type = "l", xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average number of steps by time")
lines(averageC)
plot(averageC, x.axis = as.factor(rownames(averageC)),  type = "l", xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average number of steps by time")
plot(averageC ~ as.factor(rownames(averageC)), type = "l", xlab = "Time(Hour:Minute)", ylab = "Average number of steps", main = "Average Number of Steps Taken in Two months by Time")
lines(averageC)
lines(averageC, lwd = 2)
plot(averageC ~ as.factor(rownames(averageC)), xlab = "Time(Hour:Minute)", ylab = "Average Number of Steps", main = "Average Number of Steps Taken in Two months by Time")
lines(averageC, lwd = 2)
maxC <- tapply(dt1$steps, dt1$time, max)
plotMC <- barplot(maxC, space = 0.5, names.arg = rownames(maxC),
xlab = "Time(Hour:Minute)", ylab = "Average Number of Steps", main = "Average Number of Steps Taken in Two months by Time")
library(impute)
install.packages("impute")
ap <- available.packages()
View(ap)
"impute" %in% rownames(ap)
View(ap)
"Impute" %in% rownames(ap)
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
dt2 <- dt
dt2 <- impute.knn(dt$steps)
str(dt2)
View(dt2)
?impute.knn
dt2 <- impute.knn(as.matrix(dt2))
View(dt2)
dt2 <- dt
dt2 <- impute.knn(as.matrix(dt2$steps))
View(dt2)
dt2 <- dt
dt2$steps <- impute.knn(as.matrix(dt2$steps))
View(dt2)
dt2 <- dt
dt2$steps <- impute.knn(dt2$steps)
View(dt)
dt <- read.csv("activity.csv")
View(dt)
str(dt)
dt2 <- dt
dt2$steps <- impute.knn(dt2$steps)
dt2 <- dt
dt2 <- impute.knn(as.matrix(dt2))
View(dt2)
View(dt)
View(dt2)
View(dt)
dt2 <- dt
dim(dt2)
dt2 <- impute.knn(dt2, 1)
dt2 <- impute.knn(as.matrix(dt2), 1)
dt2 <- dt
class(dt2$steps)
mat1 <- matrix(1:12,3)
mat1[2,2] <- NA
impute.knn(mat1,2)
dt2 <- dt
dt[,"date"] <- as.Date(dt[, "date"])
dt2 <- dt
str(dt2)
dt2 <- impute.knn(dt2, 1)
dt2 <- impute.knn(as.matrix(dt2), 1)
stepsD <- dt2$steps
stepsD
step <- dt2$steps
stepD <- matrix(step,nrow = 288,ncol = 61)
View(stepD)
stepD1 <- impute.knn(stepD)
View(stepD)
stepD1 <- impute.knn(stepD, 6)
library(impute)
?impute.knn
dt2 <- dt
step <- dt2$steps
stepD <- matrix(step,nrow = 288,ncol = 61)
View(stepD)
stepD1 <- impute.knn(stepD, rowmax = 1, colmax = 1)
stepD1
stepD <- matrix(step,nrow = 288,ncol = 61)
stepD1 <- impute.knn(stepD, colmax = 1)
stepD1
class(stepD1)
stepD <- matrix(step,nrow = 288,ncol = 61)
View(stepD)
stepD1 <- impute.knn(stepD, rowmax = 1)
install.packages("Amelia")
library(Amelia)
?"amelia"
step <- as.numeric(dt$steps)
stepD <- matrix(step,nrow = 288,ncol = 61)
View(stepD)
stepD2 <- amelia(stepD)
stepD2 <- amelia(stepD)$data
stepD2 <- amelia(stepD)
View(dt)
View(dt1)
View(dt)
step <- as.numeric(dt$steps)
stepD <- matrix(step,nrow = 288,ncol = 61)
View(stepD)
step <- dt$steps
str(dt)
step <- dt$steps
str(step)
stepD <- matrix(step,nrow = 288,ncol = 61)
View(stepD)
stepD[1,]
stepD[1,3]
stepD[1,60]
for (i in 1:2) {
average <- sum(na.omit(stepD[i, ]))
if (is.na(stepD[i, ])) {
stepD[i, ] <- average
}
View(stepD)
for (i in 1:2) {
average <- sum(na.omit(stepD[i, ])); print (average)
for (j in 1:61) {
if (is.na(stepD[i, j])) {
stepD[i, j] <- average
}
View(stepD)
stepD <- dt$steps
stepDM <- matrix(stepD, nrow = 288,ncol = 61)
View(stepDM)
stepDM[1,4]
for (i in 1:2) {
averageD <- mean(na.omit(stepDM[i, ])); print (averageD)
for (j in 1:61) {
if (is.na(stepDM[i, j])) {
stepDM[i, j] <- averageD
}
stemDM[1,]
stepDM[1,]
stepDM[2,]
summary(dt)
summarize(dt)
summarise(dt)
stepD <- dt$steps
stepDM <- matrix(stepD, nrow = 288,ncol = 61)
for (i in 1:288) {
averageD <- mean(na.omit(stepDM[i, ])); print (averageD)
for (j in 1:61) {
if (is.na(stepDM[i, j])) {
stepDM[i, j] <- averageD
}
stepDM[2:10,]
sum(is.na(stepDM))
stepDV <- c(stepDM)
stepDV
dt2 <- dt
dt2$steps <- stepDV
View(dt2)
str(dt2)
dt[1,]
dt2[1,]
dt2[100,]
dt[100,]
dt[1000,]
dt[10000,]
dt[733,]
dt2[733,]
dt2[2,]
dt[2,]
dt[722,]
dt2[722,]
str(dt2)
totalD <- tapply(dt2$steps, dt2$date, sum)
hist(totalD, col = "grey", xlab = "Total number of steps taken per day",
main = "Frequency of total number of steps taken per day after imputing")
totalB <- tapply(dt1$steps, dt1$date, sum)
hist(totalB, col = "grey", xlab = "Total number of steps taken per day",
main = "Frequency of total number of steps taken per day")
averageD <- tapply(dt2$steps, dt2$date, mean)
medianD <- tapply(dt2$steps, dt2$date, median)
par(mfrow = c(2,1))
plotD2 <- barplot(averageD, space = 0.5, names.arg = rownames(averageD),
xlab = "Date", ylab = "Mean Number of Steps",
main = "Average Number of Steps taken dailly")
abline(h=0, lwd = 1)
plotD3 <- barplot(medianD, space = 0.5, names.arg = rownames(medianD),
xlab = "Date", ylab = "Median Number of Steps",
main = "Median Number of Steps taken dailly")
abline(h=0, lwd = 1)
dt2$daytype <- ifelse(weekdays(dt2$date), "weekday", "weekend")
View(dt2)
class(dt2$date)
dt2$daytype <- ifelse(weekdays(dt2$date) == "Saturday" | "Sunday", "weekend", "weekday")
weekdays(as.Date("2010-10-02"))
weekdays(dt2$date[2])
if (weekdays(dt2$date[2]) == "Monday") pprint("weekday")
if (weekdays(dt2$date[2]) == "Monday") print("weekday")
dt2$daytype <- ifelse(weekdays(dt2$date) == "Saturday" | weekdays(dt2$date) == "Sunday", "weekend", "weekday")
View(dt2)
dt2$daytype <- ifelse((weekdays(dt2$date) == "Saturday" | weekdays(dt2$date) == "Sunday"), "weekend", "weekday")
View(dt2)
weekdays(as.Date("2012-10-02"))
View(dt2)
dt2[dt2$date == as.Date("2012-10-06"), ]
dt2[dt2$date == as.Date("2012-10-07"), ]
dt2[dt2$date == as.Date("2012-10-08"), ]
dt2[dt2$date == as.Date("2012-11-08"), ]
dt2[dt2$date == as.Date("2012-11-09"), ]
dt2[dt2$date == as.Date("2012-11-10"), ]
dt2$daytype <- ifelse(weekdays(dt2$date) == "Saturday" | weekdays(dt2$date) == "Sunday", "weekend", "weekday")
dt2[dt2$date == as.Date("2012-11-10"), ]
dt2[dt2$date == as.Date("2012-11-09"), ]
class(dt2$daytype)
dt2$daytype <- as.factor(dt2$daytype)
str(dt2)
library(lattice)
xyplot(steps ~ time | daytype, data = dt2, layout = c(2, 1))
xyplot(steps ~ time | daytype, data = dt2, layout = c(1, 2))
View(dt2)
str(dt2)
xyplot(steps ~ as.factor(time) | daytype, data = dt2, layout = c(1, 2))
xyplot(steps ~ as.factor(time) | daytype, data = dt2, type = "l", layout = c(1, 2))
xyplot(steps ~ time | daytype, data = dt2, type = "l", layout = c(1, 2))
dt2$time <- as.factor(dt2$time)
xyplot(steps ~ time | daytype, data = dt2, type = "l", layout = c(1, 2))
averageE <- tapply(dt2$steps, dt2$time, mean)
View(dt2)
xyplot(averageE ~ time | daytype, data = dt2, type = "l", layout = c(1, 2))
?aggregate
averageE <- aggregate(steps ~ time + daytype, data = dt2, mean)
View(averageE)
str(averageE)
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2), scales=list(x=list(tick.number = 20))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2), scales=list(x=list(tick.number = 20)))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2), scales=list(x=list(tick.number = 20, at = seq(2012-10-01, 2012-11-30, 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2), scales=list(x=list(tick.number = 20, at = seq("2012-10-01", "2012-11-30", 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2), scales=list(x=list(tick.number = 20, at = seq(10-01, 11-30, 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2), scales=list(x=list(tick.number = 20, at = seq(as.Date("2012-10-01"), as.Date("2012-11-30"), 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 20, at = seq(as.POSIXct("00:00:00"), as.POSIXct("23:55:00"), 20))))
plot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 20, at = seq(as.POSIXct("00:00:00"), as.POSIXct("23:55:00"), 20), y=list(tick.number = 10))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 20, at = seq("00:00:00", "23:55:00", 20), y=list(tick.number = 10))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 20, at = seq(0, 24, 20), y=list(tick.number = 10))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 20, at = seq(0, 24, 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 24, at = seq(0, 24, 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2),
scales=list(x=list(tick.number = 25, at = seq(0, 24, 20))))
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2))
dt <- read.csv("activity.csv")
dt[,"date"] <- as.Date(dt[, "date"])
dt$time <- paste(dt$interval%/%1000,
(dt$interval%/%100)-(dt$interval%/%1000)*10,":",
(dt$interval-(dt$interval%/%100)*100)%/%10,
(dt$interval-(dt$interval%/%100)*100)%%10, sep = "")
View(dt)
totalB <- tapply(dt$steps, dt$date, sum, na.rm = TRUE)
hist(totalB, col = "grey", xlab = "Total number of steps taken per day",
main = "Frequency of total number of steps taken per day")
averageB <- tapply(dt$steps, dt$date, mean, na.rm = TRUE)
medianB <- tapply(dt$steps, dt$date, median, na.rm = TRUE)
par(mfrow = c(2,1))
plotB2 <- barplot(averageB, space = 0.5, names.arg = rownames(averageB),
xlab = "Date", ylab = "Mean Number of Steps",
main = "Average Number of Steps taken dailly")
abline(h=0, lwd = 1)
plotB3 <- barplot(medianB, space = 0.5, names.arg = rownames(medianB),
xlab = "Date", ylab = "Median Number of Steps",
main = "Median Number of Steps taken dailly")
abline(h=0, lwd = 1)
NAstep <- sum(is.na(dt$steps))
NAdate <- sum(is.na(dt$date))
NAinterval <- sum(is.na(dt$interval))
stepD <- dt$steps
stepDM <- matrix(stepD, nrow = 288,ncol = 61)
for (i in 1:288) {
averageD <- mean(na.omit(stepDM[i, ])); print (averageD)
for (j in 1:61) {
if (is.na(stepDM[i, j])) {
stepDM[i, j] <- averageD
}
stepDV <- c(stepDM)
dt2 <- dt
dt2$steps <- stepDV
View(dt2)
totalD <- tapply(dt2$steps, dt2$date, sum)
hist(totalD, col = "grey", xlab = "Total number of steps taken per day",
main = "Frequency of total number of steps taken per day after imputing")
averageD <- tapply(dt2$steps, dt2$date, mean)
medianD <- tapply(dt2$steps, dt2$date, median)
par(mfrow = c(2,1))
plotD2 <- barplot(averageD, space = 0.5, names.arg = rownames(averageD),
xlab = "Date", ylab = "Mean Number of Steps",
main = "Average Number of Steps taken dailly")
abline(h=0, lwd = 1)
plotD3 <- barplot(medianD, space = 0.5, names.arg = rownames(medianD),
xlab = "Date", ylab = "Median Number of Steps",
main = "Median Number of Steps taken dailly")
abline(h=0, lwd = 1)
dt2$daytype <- ifelse(weekdays(dt2$date) == "Saturday" | weekdays(dt2$date) == "Sunday", "weekend", "weekday")
dt2$daytype <- as.factor(dt2$daytype)
View(dt2)
library(lattice)
averageE <- aggregate(steps ~ time + daytype, data = dt2, mean)
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2))
View(averageE)
str(dt2)
str(averageE)
time <- as.factor(time)
averageE$time <- as.factor(averageE$time)
str(averageE)
xyplot(steps ~ time | daytype, data = averageE, type = "l", layout = c(1, 2))
maxC <- max(averageC)
averageC <- tapply(dt$steps, dt$time, mean, na.rm = TRUE)
maxC <- max(averageC)
intervalC <- rownames(maxC)
maxC
averageC
dfC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.vector(averageC)))
View(dfC)
str(dfC)
dfC <- data.frame(cbind(Time = as.character(as.vector(names(averageC))),
Steps = as.numeric(as.vector(averageC))))
str(dfC)
dfC$Steps <- as.numeric(dfC$Steps)
str(dfC)
maxC <- max(averageC)
intervalC <- rownames(max(averageC))
intervalC <- rownames(averageC == maxC)
if (averageC == maxC) {timeC <- rownames(averageC)}
nrow(averageC)
for (i in 1:nrow(averageC)) {
if (averageC[i] == maxC) {timeC <- rownames(averageC[i])}
}
averageC[4]
rownames(averageC[4])
names(averageC[4])
names(maxC)
rownames(maxC)
for (i in 1:nrow(averageC)) {
if (averageC[i] == maxC) {
timeC <- names(averageC[i])
}
averageC
png(".\figure\totalB.png")
str(dt)
library(knitr)
library(markdown)
library(lattice)
